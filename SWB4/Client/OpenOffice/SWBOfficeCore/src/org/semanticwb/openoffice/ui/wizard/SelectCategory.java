/*
 * SelectCategory.java
 *
 * Created on 3 de junio de 2008, 11:03 AM
 */
package org.semanticwb.openoffice.ui.wizard;

import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.util.Map;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import org.netbeans.spi.wizard.Wizard;
import org.netbeans.spi.wizard.WizardPage;
import org.netbeans.spi.wizard.WizardPanelNavResult;
import org.semanticwb.office.interfaces.CategoryInfo;
import org.semanticwb.openoffice.OfficeApplication;

/**
 *
 * @author  victor.lorenzana
 */
public class SelectCategory extends WizardPage
{

    private static final String CATEGORY_ID = "categoryID";

    /** Creates new form SelectCategory */
    public SelectCategory()
    {
        initComponents();
        loadTree();
        this.getWizardDataMap().put(CATEGORY_ID, null);
        this.getWizardDataMap().put("repositoryName", null);
    }

    private void loadTree()
    {
        this.jTreeCategory.setCellRenderer(new TreeRender());
        this.jTreeCategory.setEditable(false);
        DefaultMutableTreeNode repositories = new RepositoryNode("Repositorios");
        DefaultTreeModel model = new DefaultTreeModel(repositories);
        this.jTreeCategory.setModel(model);
        try
        {
            for ( String repository : OfficeApplication.getOfficeApplicationProxy().getRepositories() )
            {
                DefaultMutableTreeNode repositoryNode = new RepositoryNode(repository);
                model.insertNodeInto(repositoryNode, repositories, 0);
                for ( CategoryInfo category : OfficeApplication.getOfficeApplicationProxy().getCategories(repository) )
                {
                    DefaultMutableTreeNode categoryNode = new CategoryNode(category.UDDI, category.title, category.description);
                    model.insertNodeInto(categoryNode, repositoryNode, 0);
                }
            }
        }
        catch ( Exception wbe )
        {
            JOptionPane.showMessageDialog(this, wbe.getLocalizedMessage(), getDescription(), JOptionPane.OK_OPTION);
        }
        if ( this.jTreeCategory.getRowCount() > 0 )
        {
            this.jTreeCategory.expandRow(0);
        }

    }

    public static String getDescription()
    {
        return "Ubicación del contenido";
    }

    @Override
    public WizardPanelNavResult allowNext(String arg, Map map, Wizard wizard)
    {
        WizardPanelNavResult result = WizardPanelNavResult.PROCEED;
        if ( this.getWizardDataMap().get(CATEGORY_ID) == null )
        {
            javax.swing.JOptionPane.showMessageDialog(null, "¡Debe seleccionar una categoria!", getDescription(), JOptionPane.ERROR_MESSAGE);
            this.jTreeCategory.requestFocus();
            result = WizardPanelNavResult.REMAIN_ON_PAGE;
        }
        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeCategory = new JTree(){
            public String getToolTipText(MouseEvent evt) 
            {
                String value=null;
                if (getRowForLocation(evt.getX(), evt.getY()) != -1)
                {
                    TreePath curPath = getPathForLocation(evt.getX(), evt.getY());
                    value=((ToolTipTreeNode)curPath.getLastPathComponent()).getToolTipText();
                }    
                return value;	
            }
        };
        ;

        setPreferredSize(new java.awt.Dimension(500, 322));
        setLayout(new java.awt.BorderLayout());

        jTreeCategory.setFocusCycleRoot(true);
        jTreeCategory.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTreeCategoryValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTreeCategory);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents
    private void jTreeCategoryValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTreeCategoryValueChanged
        if ( this.jTreeCategory.getSelectionPath().getLastPathComponent() instanceof CategoryNode )
        {
            String categoryID = (( CategoryNode ) this.jTreeCategory.getSelectionPath().getLastPathComponent()).getID();
            String repositoryName = (( RepositoryNode ) this.jTreeCategory.getSelectionPath().getParentPath().getLastPathComponent()).getName();
            this.getWizardDataMap().put(CATEGORY_ID, categoryID);
            this.getWizardDataMap().put("repositoryName", repositoryName);
        }
        else
        {
            this.getWizardDataMap().put(CATEGORY_ID, null);
            this.getWizardDataMap().put("repositoryName", null);
        }
    }//GEN-LAST:event_jTreeCategoryValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTreeCategory;
    // End of variables declaration//GEN-END:variables
}

interface ToolTipTreeNode
{

    public String getToolTipText();
}

class RepositoryNode extends DefaultMutableTreeNode implements ToolTipTreeNode
{

    private JLabel component = new JLabel();
    private String name;

    public RepositoryNode(String name)
    {
        this.name = name;
        component.setText(name);
        component.setOpaque(true);
    }

    public String getToolTipText()
    {
        return this.name;
    }

    public String getName()
    {
        return name;
    }

    @Override
    public String toString()
    {
        this.hashCode();
        return name;
    }

    @Override
    public int hashCode()
    {
        return this.name.hashCode();
    }

    @Override
    public boolean equals(Object obj)
    {
        boolean equals = false;
        if ( obj instanceof RepositoryNode )
        {
            equals = (( RepositoryNode ) obj).name.equals(this.name);
        }
        return equals;
    }

    public JLabel getComponent()
    {
        return component;
    }
}

class CategoryNode extends DefaultMutableTreeNode implements ToolTipTreeNode
{

    private JLabel component = new JLabel();
    private String id;
    private String title;
    private String description;

    public CategoryNode(String id, String title, String description)
    {
        this.id = id;
        this.title = title;
        this.description = description;

        component.setText(title);
        component.setToolTipText(description);
        component.setOpaque(true);
    }

    public String getToolTipText()
    {
        return description;
    }

    @Override
    public String toString()
    {
        this.hashCode();
        return title;
    }

    @Override
    public int hashCode()
    {
        return this.title.hashCode();
    }

    @Override
    public boolean equals(Object obj)
    {
        boolean equals = false;
        if ( obj instanceof CategoryNode )
        {
            equals = (( CategoryNode ) obj).title.equals(this.title);
        }
        return equals;
    }

    public String getID()
    {
        return id;
    }

    public String getDescription()
    {
        return this.description;
    }

    public JLabel getComponent()
    {
        return component;
    }
}

class TreeRender extends JPanel implements TreeCellRenderer
{

    public Component getTreeCellRendererComponent(JTree tree, Object object, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus)
    {
        Component component = this;
        tree.setToolTipText("");
        if ( object instanceof CategoryNode )
        {
            component = (( CategoryNode ) object).getComponent();
            if ( hasFocus )
            {
                tree.setToolTipText((( CategoryNode ) object).getDescription());
            }
        }
        if ( object instanceof RepositoryNode )
        {
            component = (( RepositoryNode ) object).getComponent();
        //component.setFont(tree.getFont());
        }
        if ( component != null )
        {
            JLabel label = ( JLabel ) component;

            label.setFont(tree.getFont());
            if ( expanded )
            {
                label.setIcon(new javax.swing.ImageIcon(getClass().getResource("open.gif")));
            }
            else
            {
                label.setIcon(new javax.swing.ImageIcon(getClass().getResource("close.gif")));
            }
            if ( selected )
            {
                label.setBackground(Color.BLUE);
                label.setForeground(Color.WHITE);
            }
            else
            {
                label.setBackground(tree.getBackground());
                label.setForeground(tree.getForeground());
            }
        }
        return component;

    }
}
