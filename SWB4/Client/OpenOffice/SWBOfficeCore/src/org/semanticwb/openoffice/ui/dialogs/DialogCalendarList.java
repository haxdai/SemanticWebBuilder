/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DialogCalendarList2.java
 *
 * Created on 24/06/2009, 11:01:27 AM
 */
package org.semanticwb.openoffice.ui.dialogs;

import java.awt.Cursor;
import java.awt.Frame;
import java.io.Reader;
import java.io.StringReader;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.jdom.Document;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;
import org.semanticwb.office.interfaces.CalendarInfo;
import org.semanticwb.office.interfaces.ResourceInfo;
import org.semanticwb.openoffice.OfficeApplication;
import org.semanticwb.openoffice.ui.icons.ImageLoader;

/**
 *
 * @author victor.lorenzana
 */
public class DialogCalendarList extends javax.swing.JDialog
{

    private boolean canceled = true;
    private final ResourceInfo resourceInfo;

    /** Creates new form DialogCalendarList2 */
    public DialogCalendarList(ResourceInfo resourceInfo)
    {
        super((Frame) null, ModalityType.TOOLKIT_MODAL);
        this.resourceInfo = resourceInfo;
        this.setIconImage(ImageLoader.images.get("semius").getImage());
        this.setModal(true);
        initComponents();
        setLocationRelativeTo(null);
        this.jListCalendars.setModel(new DefaultListModel());
        fillCalendarList();
    }

    private void fillCalendarList()
    {
        DefaultListModel model = (DefaultListModel) this.jListCalendars.getModel();
        model.clear();
        try
        {

            for (CalendarInfo cal : OfficeApplication.getOfficeDocumentProxy().getCatalogCalendars(resourceInfo.page.site))
            {
                model.add(0, cal);
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jButtonAddNewCalendar = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jButtonEditCalendar = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jButtonDeleteCalendar = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCalendars = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Catálogo de calendarios");
        setResizable(false);

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 40));

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButtonClose.setText("Cerrar");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(233, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButtonClose)
                .addGap(15, 15, 15))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButtonClose))
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jPanel2.setPreferredSize(new java.awt.Dimension(400, 30));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButtonAddNewCalendar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/semanticwb/openoffice/ui/icons/add.png"))); // NOI18N
        jButtonAddNewCalendar.setToolTipText("Agregar un calenario al catálogo");
        jButtonAddNewCalendar.setFocusable(false);
        jButtonAddNewCalendar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonAddNewCalendar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonAddNewCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddNewCalendarActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonAddNewCalendar);
        jToolBar1.add(jSeparator1);

        jButtonEditCalendar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/semanticwb/openoffice/ui/icons/edit.png"))); // NOI18N
        jButtonEditCalendar.setToolTipText("Editar un calendario");
        jButtonEditCalendar.setFocusable(false);
        jButtonEditCalendar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonEditCalendar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonEditCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditCalendarActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonEditCalendar);
        jToolBar1.add(jSeparator2);

        jButtonDeleteCalendar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/semanticwb/openoffice/ui/icons/delete.png"))); // NOI18N
        jButtonDeleteCalendar.setToolTipText("Eliminar un calendario al catalogo");
        jButtonDeleteCalendar.setFocusable(false);
        jButtonDeleteCalendar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonDeleteCalendar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDeleteCalendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteCalendarActionPerformed(evt);
            }
        });
        jToolBar1.add(jButtonDeleteCalendar);

        jPanel2.add(jToolBar1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jListCalendars.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListCalendars.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListCalendarsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListCalendars);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonCloseActionPerformed
    {//GEN-HEADEREND:event_jButtonCloseActionPerformed
        this.canceled = true;
        this.setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        this.canceled = false;
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonAddNewCalendarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddNewCalendarActionPerformed
    {//GEN-HEADEREND:event_jButtonAddNewCalendarActionPerformed
        DialogCalendar dialogCalendar = new DialogCalendar();
        dialogCalendar.setVisible(true);
        if (!dialogCalendar.isCanceled)
        {
            Document xmlCalendar = dialogCalendar.getDocument();
            XMLOutputter out = new XMLOutputter();
            String xml = out.outputString(xmlCalendar);
            String title = dialogCalendar.jTextFieldTitle.getText();
            try
            {
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                OfficeApplication.getOfficeApplicationProxy().createCalendar(resourceInfo.page.site, title, xml);
                fillCalendarList();
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            finally
            {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }//GEN-LAST:event_jButtonAddNewCalendarActionPerformed

    private void jListCalendarsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListCalendarsValueChanged
    {//GEN-HEADEREND:event_jListCalendarsValueChanged
        if (this.jListCalendars.getSelectedIndex() == -1)
        {
            this.jButtonEditCalendar.setEnabled(false);
            this.jButtonDeleteCalendar.setEnabled(false);
        }
        else
        {
            this.jButtonEditCalendar.setEnabled(true);
            this.jButtonDeleteCalendar.setEnabled(true);
        }
    }//GEN-LAST:event_jListCalendarsValueChanged

    private void jButtonEditCalendarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonEditCalendarActionPerformed
    {//GEN-HEADEREND:event_jButtonEditCalendarActionPerformed
        if (this.jListCalendars.getSelectedIndex() != -1)
        {
            DefaultListModel model = (DefaultListModel) this.jListCalendars.getModel();
            CalendarInfo cal = (CalendarInfo) model.get(this.jListCalendars.getSelectedIndex());
            if (cal.xml != null)
            {
                DialogCalendar dialogCalendar = new DialogCalendar();
                SAXBuilder builder = new SAXBuilder();
                Reader reader = new StringReader(cal.xml);
                try
                {
                    Document document = builder.build(reader);
                    dialogCalendar.setDocument(document, cal.title);
                    dialogCalendar.setVisible(true);
                    if(!dialogCalendar.isCanceled)
                    {
                        Document xmlCalendar = dialogCalendar.getDocument();
                        XMLOutputter out = new XMLOutputter();
                        String xml = out.outputString(xmlCalendar);
                        String title = dialogCalendar.jTextFieldTitle.getText();
                        cal.title=title;
                        cal.xml=xml;
                        try
                        {
                            this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                            OfficeApplication.getOfficeDocumentProxy().updateCalendar(resourceInfo.page.site, cal);
                        }
                        catch(Exception e)
                        {
                            e.printStackTrace();
                        }
                        finally
                        {
                            this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                        }
                    }
                }
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        }
    }//GEN-LAST:event_jButtonEditCalendarActionPerformed

    private void jButtonDeleteCalendarActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonDeleteCalendarActionPerformed
    {//GEN-HEADEREND:event_jButtonDeleteCalendarActionPerformed
        if (this.jListCalendars.getSelectedIndex() != -1)
        {
            DefaultListModel model = (DefaultListModel) this.jListCalendars.getModel();
            CalendarInfo cal = (CalendarInfo) model.get(this.jListCalendars.getSelectedIndex());
            try
            {
                this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
                boolean canDelete = OfficeApplication.getOfficeApplicationProxy().canDeleteCalendar(this.resourceInfo.page.site, cal);
                if (canDelete)
                {
                    OfficeApplication.getOfficeDocumentProxy().deleteCalendarFromCatalog(this.resourceInfo.page.site, cal);
                    //model.removeElement(cal);
                    fillCalendarList();
                    if (this.jListCalendars.getSelectedIndex() == -1 || model.isEmpty())
                    {
                        this.jButtonDeleteCalendar.setEnabled(false);
                        this.jButtonEditCalendar.setEnabled(false);
                    }
                    else
                    {
                        this.jButtonDeleteCalendar.setEnabled(true);
                        this.jButtonEditCalendar.setEnabled(true);
                    }
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "¡El calendario no se puede borrar, esta siendo utilizado por otro contenido u otro elemento del portal!", this.getTitle(), JOptionPane.OK_OPTION | JOptionPane.WARNING_MESSAGE);
                }
            }
            catch (Exception e)
            {
                e.printStackTrace();
            }
            finally
            {
                this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        }
    }//GEN-LAST:event_jButtonDeleteCalendarActionPerformed

    public boolean isCanceled()
    {
        return canceled;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAddNewCalendar;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonDeleteCalendar;
    private javax.swing.JButton jButtonEditCalendar;
    public javax.swing.JList jListCalendars;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
