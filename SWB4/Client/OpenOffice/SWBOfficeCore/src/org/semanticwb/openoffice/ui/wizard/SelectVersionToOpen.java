/*
 * SelectVersionToOpen.java
 *
 * Created on 3 de junio de 2008, 11:55 AM
 */
package org.semanticwb.openoffice.ui.wizard;

import java.awt.Cursor;
import java.awt.event.KeyEvent;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.netbeans.spi.wizard.Wizard;
import org.netbeans.spi.wizard.WizardPage;
import org.netbeans.spi.wizard.WizardPanelNavResult;
import org.semanticwb.office.interfaces.ContentInfo;
import org.semanticwb.office.interfaces.VersionInfo;
import org.semanticwb.openoffice.OfficeApplication;

/**
 *
 * @author  victor.lorenzana
 */
public class SelectVersionToOpen extends WizardPage
{
    public static final String VERSION = "version";

    /** Creates new form SelectVersionToOpen */
    public SelectVersionToOpen()
    {        
        initComponents();
        
    }
    @Override
    protected void renderingPage()
    {
        this.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        ContentInfo content=(ContentInfo)Search.map.get(Search.CONTENT);
        DefaultTableModel model=(DefaultTableModel)this.jTableVersion.getModel();
        int rows=model.getRowCount();
        for(int i=0;i<rows;i++)
        {
            model.removeRow(0);
        }
        try
        {
            String workspace=Search.map.get(Search.WORKSPACE).toString();
            for (VersionInfo info : OfficeApplication.getOfficeDocumentProxy().getVersions(workspace, content.id))
            {
                String date=OfficeApplication.iso8601dateFormat.format(info.created);
                Object[] value={content,content.descripcion,info,date};
                model.addRow(value);
            }
        }
        catch (Exception e)
        {
        }
        this.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }

    public static String getDescription()
    {
        return "Versión de Contenido a Abrir";
    }
    @Override
    public WizardPanelNavResult allowNext(String arg, Map map, Wizard wizard)
    {
        WizardPanelNavResult result = WizardPanelNavResult.PROCEED;
        if (this.jTableVersion.getSelectedRow()==-1)
        {
            JOptionPane.showMessageDialog(this, "!Debe indicar una versión!", SelectVersionToOpen.getDescription(), JOptionPane.ERROR_MESSAGE);
            this.jTableVersion.requestFocus();            
            result = WizardPanelNavResult.REMAIN_ON_PAGE;
        }
        else
        {
            Object selection=this.jTableVersion.getModel().getValueAt(this.jTableVersion.getSelectedRow(), 2);
            map.put( VERSION,selection);                                    
        }
        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableVersion = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButtonViewVersion = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jTableVersion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Titulo", "Descripción", "Version", "Fecha de creación"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVersion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableVersionKeyPressed(evt);
            }
        });
        jTableVersion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVersionMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableVersion);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jButtonViewVersion.setText("Ver versión");
        jButtonViewVersion.setEnabled(false);
        jPanel1.add(jButtonViewVersion);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);
    }// </editor-fold>//GEN-END:initComponents

private void jTableVersionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVersionMouseClicked
    this.jButtonViewVersion.setEnabled(false);
    if(jTableVersion.getSelectedRow()!=-1)
    {
        this.jButtonViewVersion.setEnabled(true);
    }
}//GEN-LAST:event_jTableVersionMouseClicked

private void jTableVersionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableVersionKeyPressed
if(evt.getKeyCode()==KeyEvent.VK_UP || evt.getKeyCode()==KeyEvent.VK_DOWN)
    {
        jTableVersionMouseClicked(null);
    }// TODO add your handling code here:
}//GEN-LAST:event_jTableVersionKeyPressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonViewVersion;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableVersion;
    // End of variables declaration//GEN-END:variables
}
