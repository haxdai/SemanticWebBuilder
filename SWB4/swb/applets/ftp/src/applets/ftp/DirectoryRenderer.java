/**  
* SemanticWebBuilder es una plataforma para el desarrollo de portales y aplicaciones de integraci√≥n, 
* colaboraci√≥n y conocimiento, que gracias al uso de tecnolog√≠a sem√°ntica puede generar contextos de 
* informaci√≥n alrededor de alg√∫n tema de inter√©s o bien integrar informaci√≥n y aplicaciones de diferentes 
* fuentes, donde a la informaci√≥n se le asigna un significado, de forma que pueda ser interpretada y 
* procesada por personas y/o sistemas, es una creaci√≥n original del Fondo de Informaci√≥n y Documentaci√≥n 
* para la Industria INFOTEC, cuyo registro se encuentra actualmente en tr√°mite. 
* 
* INFOTEC pone a su disposici√≥n la herramienta SemanticWebBuilder a trav√©s de su licenciamiento abierto al p√∫blico (‚Äòopen source‚Äô), 
* en virtud del cual, usted podr√° usarlo en las mismas condiciones con que INFOTEC lo ha dise√±ado y puesto a su disposici√≥n; 
* aprender de √©l; distribuirlo a terceros; acceder a su c√≥digo fuente y modificarlo, y combinarlo o enlazarlo con otro software, 
* todo ello de conformidad con los t√©rminos y condiciones de la LICENCIA ABIERTA AL P√öBLICO que otorga INFOTEC para la utilizaci√≥n 
* del SemanticWebBuilder 4.0. 
* 
* INFOTEC no otorga garant√≠a sobre SemanticWebBuilder, de ninguna especie y naturaleza, ni impl√≠cita ni expl√≠cita, 
* siendo usted completamente responsable de la utilizaci√≥n que le d√© y asumiendo la totalidad de los riesgos que puedan derivar 
* de la misma. 
* 
* Si usted tiene cualquier duda o comentario sobre SemanticWebBuilder, INFOTEC pone a su disposici√≥n la siguiente 
* direcci√≥n electr√≥nica: 
*  http://www.semanticwebbuilder.org
**/ 
 


/*
 * DirectoryRenderer.java
 *
 * Created on 11 de noviembre de 2004, 11:38 AM
 */

package applets.ftp;

import javax.swing.JTree;
import javax.swing.*;
import javax.swing.tree.*;
import javax.swing.event.*;
import java.awt.*;
/**
 * Clase que da la logica de presentaciÛn gr·fica de un directorio en el applet.
 * @author Victor Lorenzana
 */
public class DirectoryRenderer extends JPanel implements TreeCellRenderer{
    
    /** Creates a new instance of DirectoryRenderer */
    JTable table;
    public DirectoryRenderer(JTable table) {
        this.table=table;
    }
    
    public Component getTreeCellRendererComponent(JTree tree, Object value, boolean selected, boolean expanded, boolean leaf, int row, boolean hasFocus) {
        if(value instanceof Directory)
        {
            Directory dir=(Directory)value;
            dir.getComponent().setFont(tree.getFont());
            if(expanded)
            {
                dir.getComponent().setIcon(new javax.swing.ImageIcon(getClass().getResource("/applets/ftp/images/open.gif")));
            }
            else
            {
                dir.getComponent().setIcon(new javax.swing.ImageIcon(getClass().getResource("/applets/ftp/images/close.gif")));
            }                 
            if(selected)
            {                
                dir.getComponent().setBackground(table.getSelectionBackground());
                dir.getComponent().setForeground(table.getSelectionForeground());
                //dir.getComponent().setIcon(new javax.swing.ImageIcon(getClass().getResource("/applets/ftp/images/open.gif")));                
            }
            else
            {
                dir.getComponent().setBackground(tree.getBackground());
                dir.getComponent().setForeground(table.getForeground());
            }
            return  dir.getComponent();
        }
        return this;
    }
    
}
