/**  
* SemanticWebBuilder es una plataforma para el desarrollo de portales y aplicaciones de integración, 
* colaboración y conocimiento, que gracias al uso de tecnología semántica puede generar contextos de 
* información alrededor de algún tema de interés o bien integrar información y aplicaciones de diferentes 
* fuentes, donde a la información se le asigna un significado, de forma que pueda ser interpretada y 
* procesada por personas y/o sistemas, es una creación original del Fondo de Información y Documentación 
* para la Industria INFOTEC, cuyo registro se encuentra actualmente en trámite. 
* 
* INFOTEC pone a su disposición la herramienta SemanticWebBuilder a través de su licenciamiento abierto al público (‘open source’), 
* en virtud del cual, usted podrá usarlo en las mismas condiciones con que INFOTEC lo ha diseñado y puesto a su disposición; 
* aprender de él; distribuirlo a terceros; acceder a su código fuente y modificarlo, y combinarlo o enlazarlo con otro software, 
* todo ello de conformidad con los términos y condiciones de la LICENCIA ABIERTA AL PÚBLICO que otorga INFOTEC para la utilización 
* del SemanticWebBuilder 4.0. 
* 
* INFOTEC no otorga garantía sobre SemanticWebBuilder, de ninguna especie y naturaleza, ni implícita ni explícita, 
* siendo usted completamente responsable de la utilización que le dé y asumiendo la totalidad de los riesgos que puedan derivar 
* de la misma. 
* 
* Si usted tiene cualquier duda o comentario sobre SemanticWebBuilder, INFOTEC pone a su disposición la siguiente 
* dirección electrónica: 
*  http://www.semanticwebbuilder.org
**/ 
 


/*
 * RuleApplet.java
 *
 * Created on 16 de enero de 2006, 11:59 AM
 */

package applets.modeler;

import applets.modeler.elements.AndElement;
import applets.modeler.elements.CondElement;
import applets.modeler.elements.NotElement;
import applets.modeler.elements.OrElement;
import applets.modeler.elements.ScopedElement;
import java.util.Enumeration;
import java.util.HashMap;
import javax.swing.ButtonModel;
import javax.swing.JToggleButton;

/**
 *
 * @author Javier Solis Gonzalez
 */
public class SampleModeler extends javax.swing.JApplet implements CommandListener
{
    private HashMap commands=new HashMap();
    private String CMD_POINT="POINT";
    
    /** Initializes the applet RuleApplet */
    public void init()
    {
        initComponents();
        
        ((GraphView)jPanel1).setCommandListener(this);
        ((GraphView)jPanel1).setApplet(this);
        //((GraphView)jPanel1).setDragEnabled(false);
        
        commands.put("AND", applets.modeler.elements.AndElement.class);
        commands.put("OR", applets.modeler.elements.OrElement.class);
        commands.put("NOT", applets.modeler.elements.NotElement.class);
        commands.put("COND", applets.modeler.elements.CondElement.class);
        commands.put("SCOPE", applets.modeler.elements.ScopedElement.class);
        
        
    }
    
    /** This method is called from within the init() method to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents()//GEN-BEGIN:initComponents
    {
        Elements = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new GraphView();
        jToolBar1 = new javax.swing.JToolBar();
        jToggleButton1 = new javax.swing.JToggleButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jToggleButton3 = new javax.swing.JToggleButton();
        jToggleButton4 = new javax.swing.JToggleButton();
        jToggleButton5 = new javax.swing.JToggleButton();
        jToggleButton6 = new javax.swing.JToggleButton();

        jScrollPane1.setBorder(new javax.swing.border.EtchedBorder(javax.swing.border.EtchedBorder.RAISED));
        jScrollPane1.setAutoscrolls(true);
        jPanel1.setBackground(java.awt.Color.white);
        jScrollPane1.setViewportView(jPanel1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jToggleButton1.setToolTipText("Pointer");
        Elements.add(jToggleButton1);
        jToggleButton1.setActionCommand("POINT");
        jToggleButton1.setLabel("Point");
        jToggleButton1.setMaximumSize(new java.awt.Dimension(50, 25));
        jToggleButton1.setMinimumSize(new java.awt.Dimension(50, 25));
        jToggleButton1.setPreferredSize(new java.awt.Dimension(50, 25));
        jToolBar1.add(jToggleButton1);

        jToggleButton2.setText("Cond");
        jToggleButton2.setToolTipText("Condition");
        Elements.add(jToggleButton2);
        jToggleButton2.setActionCommand("COND");
        jToggleButton2.setMaximumSize(new java.awt.Dimension(50, 25));
        jToggleButton2.setMinimumSize(new java.awt.Dimension(50, 25));
        jToggleButton2.setPreferredSize(new java.awt.Dimension(50, 25));
        jToggleButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jToggleButton2ActionPerformed(evt);
            }
        });

        jToolBar1.add(jToggleButton2);

        jToggleButton3.setText("And");
        jToggleButton3.setToolTipText("And");
        Elements.add(jToggleButton3);
        jToggleButton3.setActionCommand("AND");
        jToggleButton3.setMaximumSize(new java.awt.Dimension(50, 25));
        jToggleButton3.setMinimumSize(new java.awt.Dimension(50, 25));
        jToggleButton3.setPreferredSize(new java.awt.Dimension(50, 25));
        jToolBar1.add(jToggleButton3);

        jToggleButton4.setText("Or");
        jToggleButton4.setToolTipText("Or");
        Elements.add(jToggleButton4);
        jToggleButton4.setActionCommand("OR");
        jToggleButton4.setMaximumSize(new java.awt.Dimension(50, 25));
        jToggleButton4.setMinimumSize(new java.awt.Dimension(50, 25));
        jToggleButton4.setPreferredSize(new java.awt.Dimension(50, 25));
        jToolBar1.add(jToggleButton4);

        jToggleButton5.setText("Not");
        jToggleButton5.setToolTipText("Negation");
        Elements.add(jToggleButton5);
        jToggleButton5.setActionCommand("NOT");
        jToggleButton5.setMaximumSize(new java.awt.Dimension(50, 25));
        jToggleButton5.setMinimumSize(new java.awt.Dimension(50, 25));
        jToggleButton5.setPreferredSize(new java.awt.Dimension(50, 25));
        jToggleButton5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jToggleButton5ActionPerformed(evt);
            }
        });

        jToolBar1.add(jToggleButton5);

        jToggleButton6.setText("Scoped");
        jToggleButton6.setToolTipText("Scoped");
        Elements.add(jToggleButton6);
        jToggleButton6.setActionCommand("SCOPE");
        jToggleButton6.setMaximumSize(new java.awt.Dimension(50, 25));
        jToggleButton6.setMinimumSize(new java.awt.Dimension(50, 25));
        jToggleButton6.setPreferredSize(new java.awt.Dimension(50, 25));
        jToolBar1.add(jToggleButton6);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

    }//GEN-END:initComponents

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButton2ActionPerformed
    {//GEN-HEADEREND:event_jToggleButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    private void jToggleButton5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jToggleButton5ActionPerformed
    {//GEN-HEADEREND:event_jToggleButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jToggleButton5ActionPerformed

    public String getActualCommand()
    {
        if(Elements.getSelection()!=null)
        {
            return Elements.getSelection().getActionCommand();
        }
        return null;
    }    
    
    public void setActualCommand(String actionCommand)
    {
        Enumeration en=Elements.getElements();
        while(en.hasMoreElements())
        {
            JToggleButton b=(JToggleButton)en.nextElement();
            if(b.getActionCommand().equals(actionCommand))
            {
                b.setSelected(true);
                break;
            }
        }
    }    
    
    public String getPointerCommand()
    {
        return CMD_POINT;
    }
    
    public Class getCommandElement(String actionCommand)
    {
        return (Class)commands.get(actionCommand);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup Elements;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JToggleButton jToggleButton3;
    private javax.swing.JToggleButton jToggleButton4;
    private javax.swing.JToggleButton jToggleButton5;
    private javax.swing.JToggleButton jToggleButton6;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    
}
